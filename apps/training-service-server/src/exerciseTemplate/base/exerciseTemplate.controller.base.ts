/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExerciseTemplateService } from "../exerciseTemplate.service";
import { ExerciseTemplateCreateInput } from "./ExerciseTemplateCreateInput";
import { ExerciseTemplate } from "./ExerciseTemplate";
import { ExerciseTemplateFindManyArgs } from "./ExerciseTemplateFindManyArgs";
import { ExerciseTemplateWhereUniqueInput } from "./ExerciseTemplateWhereUniqueInput";
import { ExerciseTemplateUpdateInput } from "./ExerciseTemplateUpdateInput";

export class ExerciseTemplateControllerBase {
  constructor(protected readonly service: ExerciseTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExerciseTemplate })
  async createExerciseTemplate(
    @common.Body() data: ExerciseTemplateCreateInput
  ): Promise<ExerciseTemplate> {
    return await this.service.createExerciseTemplate({
      data: {
        ...data,

        exercises: data.exercises
          ? {
              connect: data.exercises,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        image: true,
        video: true,

        exercises: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExerciseTemplate] })
  @ApiNestedQuery(ExerciseTemplateFindManyArgs)
  async exerciseTemplates(
    @common.Req() request: Request
  ): Promise<ExerciseTemplate[]> {
    const args = plainToClass(ExerciseTemplateFindManyArgs, request.query);
    return this.service.exerciseTemplates({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        image: true,
        video: true,

        exercises: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExerciseTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async exerciseTemplate(
    @common.Param() params: ExerciseTemplateWhereUniqueInput
  ): Promise<ExerciseTemplate | null> {
    const result = await this.service.exerciseTemplate({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
        image: true,
        video: true,

        exercises: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExerciseTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExerciseTemplate(
    @common.Param() params: ExerciseTemplateWhereUniqueInput,
    @common.Body() data: ExerciseTemplateUpdateInput
  ): Promise<ExerciseTemplate | null> {
    try {
      return await this.service.updateExerciseTemplate({
        where: params,
        data: {
          ...data,

          exercises: data.exercises
            ? {
                connect: data.exercises,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          image: true,
          video: true,

          exercises: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExerciseTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExerciseTemplate(
    @common.Param() params: ExerciseTemplateWhereUniqueInput
  ): Promise<ExerciseTemplate | null> {
    try {
      return await this.service.deleteExerciseTemplate({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
          image: true,
          video: true,

          exercises: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
